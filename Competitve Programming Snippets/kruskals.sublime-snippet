<snippet>
	<content><![CDATA[

// Kruskals Algorithm
// Make sure nodes are 0 based indexed
class DSU {
    public:
    vector<ll> Parent, Rank;
    DSU(ll n) {
        Parent.resize(n);
        Rank.resize(n, 0);
        for (ll i = 0; i < n; i++) Parent[i] = i;
    }
    ll Find(ll x) {
        return Parent[x] = Parent[x] == x ? x : Find(Parent[x]);
    }
    bool Union(ll x, ll y) {
        ll xset = Find(x), yset = Find(y);
        if (xset != yset) {
            Rank[xset] < Rank[yset] ? Parent[xset] = yset : Parent[yset] = xset;
            Rank[xset] += Rank[xset] == Rank[yset];
            return true;
        }
        return false;
    }
};
// DSU dsu(n);
// dsu.Union(edgeList[i][0] , edgeList[i][1]);
// if(dsu.Find(q[0]) == dsu.Find(q[1]))

void solve(){
	ll n,m;
	cin>>n>>m;
	ll ans=0;
	vector<vl> edges(m);
	for(ll i=0;i<m;i++){
		ll x,y,w;
		cin>>x>>y>>w;
		x--;
		y--;
		edges[i] = {w,x,y};
	}

	sort(all(edges));
	DSU dsu(n);
	for(ll i=0;i<m;i++){
		ll x = edges[i][1];
		ll y = edges[i][2];
		ll w = edges[i][0];

		if(dsu.Find(x) != dsu.Find(y)){
			dsu.Union(x,y);
			ans += w;
		}
	}

	cout<<ans<<nl;
}


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>kruskals</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
