<snippet>
	<content><![CDATA[

// Linear diophantine equation
// Extended eucledian Algorithm
ll extended_gcd(ll a, ll b, ll &x, ll &y)
{
    if (b == 0)
    {
        x = 1;
        y = 0;
        return a;
    }

    ll x1, y1;
    ll d = extended_gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}

bool any_solution(ll a, ll b, ll c, ll &x, ll &y)
{
    ll g = __gcd(abs(a), abs(b));
    if (c % g != 0)
        return false;

    // Required => a x + b y = c
    // a x0 + b y0 = g
    ll x0 = 0, y0 = 0;
    ll val = extended_gcd(abs(a), abs(b), x0, y0);

    x = x0 * c / g;
    y = y0 * c / g;

    if (a < 0) x = -x;
    if (b < 0) y = -y;
    return true;
}
// general solution
// xg = x + k * b/g   //xg is general x  //x is solution of ax+by=c
// yg = y - k * a/g   //yg is general y  //y is solution of ax+by=c

bool both_positive_solution(ll a, ll b, ll c, ll &x, ll &y){
    ll pos = any_solution(a, b, c, x, y);
    if(pos==0)
        return false;

    ll g = __gcd(abs(a), abs(b));
    ll xg=x, yg=y;
    if(x<0){
        ll k = ceil((-x * g * 1.0) / b);
        xg = x + k * b / g;
        yg = y - k * a / g;
    }else if(y<0){
        ll k = ceil((-y * g * 1.0) / a);
        xg = x - k * b / g;
        yg = y + k * a / g;
    }

    if(xg<0 || yg<0)
        return false;

    x = xg;
    y = yg;
    return true;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>any_solution</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
